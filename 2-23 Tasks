Tasks for Feb 23

==================
TASK 1: BAREBONES CLASSES
==================
I think it would be a good idea to start by creating barebones classes with just
the attributes you need. Just the framework, not a lot of coding.
Remember, all these classes are outlined in /Feb13 Meeting Notes

- PlayerType
- GameClass
- PropertyType
- BoardClass (Task 2)

==================
TASK 2: BOARDCLASS
==================


"There are 40 spaces on the Monopoly board and 28 properties
(22 colored streets, four railroads, and two utility spaces).
There are three chance spaces, three community chest spaces, a luxury tax space,
and an income tax space on the Monopoly board."


BoardClass is especially important. We want to use a data structure that lets us
store 40 spaces, where each space is going to have a fair amount of information.

I want to be opting for using vector lists as often as possible, as these
so much easier to iterate/count etc.

My first thinking is that boardClass is going to be a vector list of type "BoardSpace",
a class detailed below. The Boardclass is probably the most important class and
we need it to be rock solid: not too complicated, but not too minimal either.


(If you go for my suggestion,
with 'boardSpace' it's own class, with attributes
- "whosHere" (vector list of Playertype)
- a pointer to a PropertyType)

so the entire board would have having a structure like this.
Board -> boardSpace -> propertyClass -> Property

==================
TASK 3: FUNCTIONS
==================

These are the functions that would be great to have (after the aformentioned
classes above, though they're probably helpful to think about while making classes.


GameClass Functions:

PlayerType getTurn(){
	return this->turn
}

void move(PlayerType player, int distance){
	/*
	when moving, I think we'll want to update the location for that
	specific playerclass, as well as update positions on our boardclass.
	move player by distance
	*/
	move player by distance
	update values described above.
}

PropertyClass getProperty(PlayerType player or int Space ?){
return property on that space.
}

int buyProperty(Playertype player, propertyType property){
check if player has enough money, calls banker function
returns 1 if fails, 0 if not.
}

void banker(playerType buyer, playertype seller){
transfers money from one player to the other.
(We'll always have a player "bank" who has inf money);
}




Let me know if you have any questions about any of this. It's a decent amount of
work but I think very doable in a couple solid hours. The notes here are suggestions,
but let's talk it over if you want to make any large implementation changes.

- Q
